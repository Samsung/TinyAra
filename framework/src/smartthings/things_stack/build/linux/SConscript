##
# This script set linux specific flags (GNU GCC)
#
##
Import('env')

print "Reading linux configuration script"
arch = env.get('TARGET_ARCH')
secure = env.get('SECURE')	
# Set release/debug flags
if env.get('RELEASE'):
	env.AppendUnique(CCFLAGS = ['-Os'])
	env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
	env.AppendUnique(CCFLAGS = ['-g'])
	env.AppendUnique(CPPDEFINES = ['-DTB_LOG'])
env.AppendUnique(CPPDEFINES = ['-DROUTING_EP'])
env.AppendUnique(CPPDEFINES = ['WITH_POSIX', '__linux__'])
env.AppendUnique(CFLAGS = ['-std=gnu99'])
env.AppendUnique(CCFLAGS = ['-Wall', '-fPIC'])

if 1 == secure:
	env.AppendUnique(CPPDEFINES = ['-D__SECURE__'])

env.AppendUnique(LINKFLAGS = ['-ldl', '-lpthread'])

if env.get('TARGET_OS') == 'tizen':
	env.AppendUnique(CCFLAGS = ['-D__TIZEN__', '-DSLP_SDK_LOG', '-D_GNU_SOURCE', '-DTIZEN_DEBUG_ENABLE'])
	env.ParseConfig("pkg-config glib-2.0 gthread-2.0 --cflags --libs")
	env.ParseConfig("pkg-config dlog --cflags --libs")

if True == env.get('FT_ON'):
	env.AppendUnique(CPPDEFINES = ['FILE_TRANSFER'])

# Set arch flags
target_arch = env.get('TARGET_ARCH')
if target_arch in ['x86']:
	env.AppendUnique(CCFLAGS = ['-m32'])
	env.AppendUnique(LINKFLAGS = ['-m32'])
	print "LINUX BUILD FOR 32BIT"
elif target_arch in ['x86_64']:
	env.AppendUnique(CCFLAGS = ['-m64'])
	env.AppendUnique(LINKFLAGS = ['-m64'])
elif target_arch in ['mips']:
	print "****************************************************"
	print "*                                                  *"
	print "* Iotivity build for mips.                         *"
	print "*                                                  *"
	print "****************************************************"
elif target_arch == 'fsl':
	print "****************************************************"
	print "*                                                  *"
	print "* Iotivity build for fsl.                          *"
	print "*                                                  *"
	print "****************************************************"
	src_dir = env.get('SRC_DIR')
	print src_dir
	env.AppendUnique(CPPPATH = [src_dir + '/../iotivity/extlibs/boost/boost/'])	
elif target_arch == 'armgnueabi':
	print "****************************************************"
	print "*                                                  *"
	print "* Iotivity build for armgnueabi.                   *"
	print "*                                                  *"
	print "****************************************************"
	src_dir = env.get('SRC_DIR')
	print src_dir
	env.AppendUnique(CPPPATH = [src_dir + '/../iotivity/extlibs/boost/boost/'])		
elif target_arch.find('v7a-hard') > 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv7-a'])
	env.AppendUnique(CPPFLAGS = ['-mfloat-abi=hard'])
	env.AppendUnique(CCFLAGS = ['-mfloat-abi=hard'])
	env.AppendUnique(LINKFLAGS = ['-mfloat-abi=hard'])
elif target_arch.find('v7a') > 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv7-a'])
elif target_arch.find('arm64') >= 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv8-a'])
else:
	env.AppendUnique(CPPFLAGS = ['-march=armv5te'])

src_dir = env.get('SRC_DIR') 
def __install(ienv, targets, name):
	i_n = ienv.Install(env.get('BUILD_DIR'), targets)
	Alias(name, i_n)
	env.AppendUnique(TS = [name])

def __installlib(ienv, targets, name):
	i_n = ienv.Install(src_dir + '/lib/linux/' + arch, targets)
	ienv.Alias("install", i_n)
	env.AppendUnique(TS = [name])

env.AddMethod(__install, 'InstallTarget')
env.AddMethod(__installlib, 'UserInstallTargetLib')