/****************************************************************************
 *
 * Copyright ##YEAR## Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 ****************************************************************************/

/****************************************************************************
 * Included Files
 ****************************************************************************/

#include <tinyara/config.h>
#include <stdio.h>
#include <stdlib.h>

#include <task_manager/task_manager.h>

#define SAMPLE_TASK_NAME         "sample_task"
#define SAMPLE_TASK_PRIORITY     100
#define SAMPLE_TASK_STACKSIZE    1024
#define SAMPLE_TASK_ARGV         NULL
#define SAMPLE_TASK_PERMISSION   TM_APP_PERMISSION_ALL
#define SAMPLE_TASK_TIMEOUT      TM_RESPONSE_WAIT_INF
#define SAMPLE_BROADCAST_CB_DATA "Broadcast"

/****************************************************************************
 * Private Function
 ****************************************************************************/

static void sample_unicast_cb(tm_msg_t *unicast_data)
{
	printf("Hello, sample unicast callback!\n");
}

static void sample_broadcast_cb(void *broadcast_data, void *cb_data)
{
	printf("Hello, Wi-Fi is on! Callback Data: %s\n", (char *)cb_data);
}

static int sample_task(int argc, char *argv[])
{
	int ret;
	tm_msg_t *broadcast_cb_data;

	ret = task_manager_set_unicast_cb(sample_unicast_cb);
	if (ret < 0) {
		printf("Failed to set unicast callback! Return: %d\n", ret);
	}

	broadcast_cb_data = (tm_msg_t *)malloc(sizeof(tm_msg_t));
	broadcast_cb_data->msg = (void *)SAMPLE_BROADCAST_CB_DATA;
	broadcast_cb_data->msg_size = strlen(SAMPLE_BROADCAST_CB_DATA) + 1;
	ret = task_manager_set_broadcast_cb(TM_BROADCAST_WIFI_ON, sample_broadcast_cb, broadcast_cb_data);
	if (ret < 0) {
		printf("Failed to set broadcast callback! Return: %d\n", ret);
	}
	free(broadcast_cb_data);

	printf("Hello, sample_task is started by the task manager!\n");
	return 0;
}


/****************************************************************************
 * ##ENTRY_FUNC##
 ****************************************************************************/

#ifdef CONFIG_BUILD_KERNEL
int main(int argc, FAR char *argv[])
#else
int ##ENTRY_FUNC##(int argc, char *argv[])
#endif
{
	int handle;
	int ret;

	handle = task_manager_register_task(SAMPLE_TASK_NAME, SAMPLE_TASK_PRIORITY, SAMPLE_TASK_STACKSIZE, sample_task, SAMPLE_TASK_ARGV, SAMPLE_TASK_PERMISSION, SAMPLE_TASK_TIMEOUT);
	if (handle < 0) {
		printf("Failed to register sample_task to the task manager! Return: %d\n", handle);
	}

	ret = task_manager_start(handle, SAMPLE_TASK_TIMEOUT);
	if (ret < 0) {
		printf("Failed to start sample_task! Return: %d\n", ret);
	}

	/* User should unregister the registered task if user no longer wants to use registered task.
	 * Otherwise, a memory leak may occur.
	 * ret = task_manager_unregister(handle, SAMPLE_TASK_TIMEOUT); */

	return 0;
}
