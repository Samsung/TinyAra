#
# For a description of the syntax of this configuration file,
# see kconfig-language at https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
#

config MM_KERNEL_HEAP
	bool "Support a protected, kernel heap"
	default y
	depends on BUILD_PROTECTED || BUILD_KERNEL
	---help---
		Partition heap memory into two parts:  (1) a protected, kernel-mode
		heap accessible only by the TinyAra kernel, and (2) an unprotected
		user-mode heap for use by applications.  If you are only interested
		in protected the kernel from read access, then this option is not
		necessary.  If you wish to secure the kernel data as well, then
		this option should be selected.

		The kernel heap size that is used is provided a a platform-specific
		up_allocate_kheap() interface.  This configuration setting is made
		available to that platform specific code.  However, the
		up_allocate_kheap() interface may chose to ignore this setting if it
		has a more appropriate heap allocation strategy.

config MM_KERNEL_HEAPSIZE
	int "Kernal heap size"
	default 8192
	depends on MM_KERNEL_HEAP
	---help---
		This is the size of the a protected, kernel-mode heap (in bytes).
		The remaining of available memory is given to the unprotected
		user-mode heap.  This value may need to be aligned to units of the
		size of the smallest memory protection region.

config DISABLE_REALLOC_NEIGHBOR_EXTENSION
	bool "Disable Realloc Neighbor Extension"
	default n
	---help---
		If enabled, realloc will not expand from old node to neighbor freenode.
		Instead, realloc will do "malloc new node, memcpy, free old node" which is safe,
		but waste of time and memory space. And it will be one of debugging
		features, especially when you modify existing malloc/free logic.

config MM_SMALL
	bool "Small memory model"
	default n
	---help---
		Each memory allocation has a small allocation overhead.  The size
		of that overhead is normally determined by the "width" of the
		address support by the MCU.  MCUs that support 16-bit addressability
		have smaller overhead than devices that support 32-bit addressability.
		However, there are many MCUs that support 32-bit addressability *but*
		have internal SRAM of size less than or equal to 64Kb.  In this case,
		MM_SMALL can be defined so that those MCUs will also benefit
		from the smaller, 16-bit-based allocation overhead.

		WARNING:  This selection will also change the alignment of allocated
		memory.  For example, on ARM memory will have 8-byte alignment by
		default.  If MM_SMALL is selected, then allocated memory will have
		only 4-byte alignment.  This may be important on some platforms where
		64-bit data is in allocated structures and 8-byte alignment is required.

config MM_REGIONS
	int "Number of memory regions"
	default 1
	---help---
		If the architecture includes multiple, non-contiguous regions of
		memory to allocate from, this specifies the number of memory regions
		that the memory manager must handle and enables the API
		mm_addregion(heap, start, end);

config ARCH_HAVE_HEAPx
	bool
	default n

if ARCH_HAVE_HEAPx

config HEAPx_BASE
	string "List of start address for additional heap region"
	default "0x00000000,"
	---help---
		The base address list of the additional heap region.

config HEAPx_SIZE
	string "List of size for additional heap region"
	default "0,"
	---help---
		The size list of additional heap region.

endif # ARCH_HAVE_HEAPx

config GRAN
	bool "Enable Granule Allocator"
	default n
	---help---
		Enable granule allocator support.  Allocations will be aligned to the
		granule size; allocations will be in units of the granule size.
		Larger granules will give better performance and less overhead but
		more losses of memory due to alignment and quantization waste.

		NOTE: The current implementation also restricts the maximum
		allocation size to 32 granaules.  That restriction could be
		eliminated with some additional coding effort.

config GRAN_SINGLE
	bool "Single Granule Allocator"
	default n
	depends on GRAN
	---help---
		Select if there is only one instance of the granule allocator (i.e.,
		gran_initialize will be called only once. In this case, (1) there
		are a few optimizations that can can be done and (2) the GRAN_HANDLE
		is not needed.

config GRAN_INTR
	bool "Interrupt level support"
	default n
	depends on GRAN
	---help---
		Normally mutual exclusive access to granule allocator data is assured
		using a semaphore.  If this option is set then, instead, mutual
		exclusion logic will disable interrupts.  While this options is more
		invasive to system performance, it will also support use of the granule
		allocator from interrupt level logic.

config DEBUG_GRAN
	bool "Granule Allocator Debug"
	default n
	depends on GRAN && DEBUG
	---help---
		Just like DEBUG_MM, but only generates output from the gran
		allocation logic.

config MM_PGALLOC
	bool "Enable Page Allocator"
	default n
	depends on ARCH_USE_MMU
	select GRAN
	---help---
		Enable support for a MMU physical page allocator based on the
		granule allocator.

if MM_PGALLOC

config MM_PGSIZE
	int "Page Size"
	default 4096
	---help---
		The MMU page size.  Must be one of {1024, 2048, 4096, 8192, or
		16384}.  This is easily extensible, but only those values are
		currently support.

config DEBUG_PGALLOC
	bool "Page Allocator Debug"
	default n
	depends on DEBUG
	---help---
		Just like DEBUG_MM, but only generates output from the page
		allocation logic.

endif # MM_PGALLOC

config MM_SHM
	bool "Shared memory support"
	default n
	depends on MM_PGALLOC && BUILD_KERNEL && EXPERIMENTAL
	---help---
		Build in support for the shared memory interfaces shmget(), shmat(),
		shmctl(), and shmdt().

config KASAN
	bool "KASan: runtime memory debugger"
	default n
	depends on ARCH_HAVE_KASAN && !BUILD_KERNEL && !MM_SMALL
	select FRAME_POINTER
       ---help---
		Enables kernel address sanitizer - runtime memory debugger,
		designed to find out-of-bounds accesses and use-after-free bugs.
		This is strictly a debugging feature and it requires a gcc version
		of 4.9.2 or later. Detection of out of bounds accesses to stack or
		global variables requires gcc 5.0 or later.
		This feature consumes about 1/8 of available memory.

config KASAN_FUNCS_INLINE
       bool "Inlining of KASan functions"
       default y
       depends on KASAN
       ---help---
		Enable inlining of KASan functions. Disabling this options makes all functions
		outline and convenient for debugging. This options affects functions without
		'__asan_' prefix.

config KASAN_SHADOW_SCOPE
       int "Printing scope around incorrect accessed address"
       default 8
       depends on KASAN

config KASAN_GLOBALS
	bool "Check global variables accesses"
	default n
	depends on KASAN
	---help---
		Check memory addresses which belongs to global variables

config KASAN_STACK
       bool "Check stack memory accesses"
       default n
       depends on KASAN && KASAN_HEAP
       ---help---
               Check memory addresses which belongs to stack

config KASAN_IDLESTACK
       bool "Check idle thread stack memory accesses"
       default n
       depends on KASAN && KASAN_STACK
       ---help---
		Check memory addresses which belongs to idle thread stack

config KASAN_HEAP
       bool "Check heap memory accesses"
       default y
       depends on KASAN && !DEBUG_DOUBLE_FREE
       ---help---
               Check memory addresses which belongs to heap memory range

config KASAN_ALL
       bool "Check globals, stack and heap memory"
       default n
       depends on KASAN
       select KASAN_GLOBALS
       select KASAN_STACK
       select KASAN_IDLESTACK
       select KASAN_HEAP
       select KASAN_QRNT
       ---help---
               Check memory addresses which belongs to global variables, stack and heap

config KASAN_MIN_STACK
       int "Minimal size of idle thread, main user and pthread stacks"
       default 4096
       depends on KASAN_STACK
       ---help---
		Needed for correct working of stack memory sanitizing

config KASAN_QRNT
       bool "Enable KASan quarantine for detection use-after-free"
       default y
       depends on KASAN && KASAN_HEAP
       ---help---
		After freeing, memory chunk is placed in quarantine queue.
		This allow us to catch use-after-free errors.

config KASAN_QRNT_MAX
       int "Percentage from heap size for calculating max watermark"
       default 10
       depends on KASAN_QRNT

config KASAN_QRNT_LOW
       int "Percentage from max watermark for calculating low watermark"
       default 70
       depends on KASAN_QRNT

config KASAN_QRNT_CALC_AVR
       bool "Calculate average time spended in quarantine for memory chunks"
       default n
       depends on KASAN_QRNT
       ---help---

config KASAN_OS_ENLARGE
       bool "Enalrge OS partition"
       default n
       depends on KASAN && !OTA_WRITE_IMAGE
       ---help---
       May be useful when image with KASan doesn't fit into standard OS partition

choice
	prompt "Instrumentation type"
	depends on KASAN
	default KASAN_INSTR_OUTLINE

	config KASAN_INSTR_OUTLINE
	bool "Outline instrumentation"
	---help---
		Before every memory access compiler insert function call
		__asan_load*/__asan_store*. These functions performs check
		of shadow memory. This is slower than inline instrumentation,
		however it doesn't bloat size of kernel's .text section so
		much as inline does.

	config KASAN_INSTR_INLINE
	bool "Inline instrumentation"
	---help---
		Compiler directly inserts code checking shadow memory before
		memory accesses. This is faster than outline (in some workloads
		it gives about x2 boost over outline instrumentation), but
		make kernel's .text size much bigger.
		This requires a gcc version of 5.0 or later.

endchoice
