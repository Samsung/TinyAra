###########################################################################
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
#
###########################################################################
############################################################################
# arch/arm/src/amebad/Make.defs
#
#   Copyright (C) 2013-2014 Gregory Nutt. All rights reserved.
#   Author: Gregory Nutt <gnutt@nuttx.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name Gregory Nutt nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################
HEAD_ASRC  =

# Common ARM and Cortex-M33 files

CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/include/$(CONFIG_ARCH_CHIP)/

CMN_ASRCS  = up_saveusercontext.S up_fullcontextrestore.S up_switchcontext.S
CMN_ASRCS += up_fetchadd.S vfork.S

CMN_CSRCS  = up_assert.c up_blocktask.c up_copyfullstate.c up_coherent_dcache.c
CMN_CSRCS += up_createstack.c up_mdelay.c up_udelay.c up_exit.c
CMN_CSRCS += up_puts.c up_initialize.c up_initialstate.c up_interruptcontext.c
CMN_CSRCS += up_memfault.c up_modifyreg8.c up_modifyreg16.c up_modifyreg32.c
CMN_CSRCS += up_releasepending.c up_releasestack.c up_reprioritizertr.c
CMN_CSRCS += up_schedulesigaction.c up_sigdeliver.c up_stackframe.c
CMN_CSRCS += up_unblocktask.c up_usestack.c up_doirq.c up_hardfault.c
CMN_CSRCS += up_svcall.c up_vfork.c up_trigger_irq.c up_systemreset.c

ifeq ($(CONFIG_ARMV8M_STACKCHECK),y)
CMN_CSRCS += up_stackcheck.c
endif

# Configuration-dependent common files

ifeq ($(CONFIG_ARMV8M_LAZYFPU),y)
CMN_ASRCS += up_lazyexception.S
else
CMN_ASRCS += up_exception.S
endif
CMN_CSRCS += up_vectors.c

ifeq ($(CONFIG_ARCH_RAMVECTORS),y)
CMN_CSRCS += up_ramvec_initialize.c up_ramvec_attach.c
endif

ifeq ($(CONFIG_BUILD_PROTECTED),y)
CMN_CSRCS += up_mpu.c up_task_start.c up_pthread_start.c up_checkspace.c
ifneq ($(CONFIG_DISABLE_SIGNALS),y)
CMN_CSRCS += up_signal_dispatch.c
CMN_UASRCS += up_signal_handler.S
endif
endif

ifeq ($(CONFIG_STACK_COLORATION),y)
CMN_CSRCS += up_checkstack.c
endif

ifeq ($(CONFIG_ARMV8M_DCACHE),y)
CMN_CSRCS += arch_enable_dcache.c arch_disable_dcache.c
CMN_CSRCS += arch_invalidate_dcache.c arch_invalidate_dcache_all.c
ifneq ($(CONFIG_ARMV8M_DCACHE_WRITETHROUGH),y)
CMN_CSRCS += arch_clean_dcache.c arch_clean_dcache_all.c
CMN_CSRCS += arch_flush_dcache.c arch_flush_dcache_all.c
endif
endif

ifeq ($(CONFIG_ARCH_FPU),y)
CMN_ASRCS += up_fpu.S
CMN_CSRCS += up_copyarmstate.c
endif

ARCH_SRCDIR = $(TOPDIR)/arch/$(CONFIG_ARCH)/src/
DIR = $(ARCH_SRCDIR)/$(CONFIG_ARCH_CHIP)/mbed/targets/hal/rtl8721d

CFLAGS+= -mcmse

CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/fwlib/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/app/monitor/include/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/swlib/string/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/app/xmodem/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/os/os_dep/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/os/tizenrt
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/common/drivers/wlan/realtek/include
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/common/drivers/wlan/realtek/src/osdep
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/common/api/platform
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/common/api
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/project/realtek_amebaD_va0_example/inc/inc_hp
CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/mbed/hal/
CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/mbed/api/
CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/mbed/targets/hal/rtl8721d/
CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/mbed/hal/
CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/mbed/hal_ext/
CFLAGS += -I$(TOPDIR)/arch/$(CONFIG_ARCH)/src/cmsis/
CFLAGS += -I$(TOPDIR)/board/$(CONFIG_ARCH_BOARD)/src/component/soc/realtek/amebad/misc

CHIP_CSRCS += $(DIR)/flash_api.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_start.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_allocateheap.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_idle.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_irq.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_timerisr.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_serial.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_lowerhalf.c
CHIP_CSRCS +=$(TOPDIR)/arch/$(CONFIG_ARCH)/src/$(CONFIG_ARCH_CHIP)/amebad_enet.c

#ifeq ($(CONFIG_MBED_API_EN),y)
CHIP_CSRCS += $(DIR)/serial_api.c
CHIP_CSRCS += $(DIR)/pinmap_common.c
CHIP_CSRCS += $(DIR)/sys_api.c 
CHIP_CSRCS += $(DIR)/us_ticker.c
CHIP_CSRCS += $(DIR)/timer_api.c
CHIP_CSRCS += $(DIR)/dma_api.c
CHIP_CSRCS += $(DIR)/gpio_api.c
CHIP_CSRCS += $(DIR)/gpio_irq_api.c
CHIP_CSRCS += $(DIR)/pinmap.c
CHIP_CSRCS += $(DIR)/port_api.c
CHIP_CSRCS += $(DIR)/spi_api.c
CHIP_CSRCS += $(DIR)/i2c_api.c
CHIP_CSRCS += $(DIR)/i2s_api.c
CHIP_CSRCS += $(DIR)/pwmout_api.c
CHIP_CSRCS += $(DIR)/analogin_api.c
CHIP_CSRCS += $(DIR)/efuse_api.c
CHIP_CSRCS += $(DIR)/sleep.c
CHIP_CSRCS += $(DIR)/wdt_api.c
#CHIP_CSRCS += $(DIR)/spdio_api.c
CHIP_CSRCS += $(DIR)/us_ticker_api.c
CHIP_CSRCS += $(DIR)/wait_api.c
#CHIP_CSRCS += $(DIR)/rtc_api.c
CHIP_CSRCS += $(DIR)/captouch_api.c
CHIP_CSRCS += $(DIR)/keyscan_api.c
CHIP_CSRCS += $(DIR)/lcdc_api.c
#endif
